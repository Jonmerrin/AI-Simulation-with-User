#BlueJ class context
comment0.params=person\ secondPerson
comment0.target=Interactions(Mover,\ Mover)
comment0.text=\n\ Constructor\ for\ Interactions\n\ \n\ Just\ sets\ up\ the\ defaults.\n
comment1.params=x
comment1.target=void\ setAggression(double)
comment1.text=\n\ this\ resets\ the\ aggression\ after\ it's\ gone\ through\ a\ compare()\n\ (which\ is\ why\ it's\ the\ final\ aggression\ rather\ than\ the\ original)\n\ \n\ This\ is\ used\ for\ updating\ based\ on\ emotional\ reactions\ to\ actions.\n
comment10.params=
comment10.target=boolean\ getPositive()
comment11.params=
comment11.target=void\ resetProbs()
comment12.params=addStuff
comment12.target=void\ addToStory(java.lang.String)
comment13.params=
comment13.target=java.lang.String\ getLastInteract()
comment14.params=guy\ otherGuy
comment14.target=void\ compare(Mover,\ Mover)
comment14.text=\n\ The\ interaction\ between\ two\ characters.\ Figured\ it\ would\ be\ simpler\ to\ hold\ it\ all\ in\ its\ own\ class.\n\ \n\ This\ compares\ one\ character's\ stats\ against\ the\ other\ to\ form\ a\ series\ of\ probabilities\ that\ will\ be\ used\ to\ form\ a\ likely\ course\ of\ action.\n
comment15.params=
comment15.target=int\ getOption()
comment16.params=x
comment16.target=void\ setOption(int)
comment17.params=
comment17.target=double\ getFinalVio()
comment18.params=
comment18.target=java.lang.String\ getRelationship()
comment19.params=guy\ otherGuy
comment19.target=void\ interact(Mover,\ Mover)
comment19.text=\n\ The\ interaction\ method.\n\ \n\ This\ method\ takes\ the\ probabilities\ established\ in\ compare(Mover,Mover)\ and\ selects\ a\ likely\ course\ of\ action\ using\ a\ couple\ of\ Math.random()'s.\n\ \n\ You'll\ notice\ that\ the\ 6\ options\ only\ say\ what\ they\ can\ do\ rather\ than\ actually\ do\ them.\n\ This\ is\ because\ we\ can't\ be\ sure\ that\ their\ action\ will\ succeed\ until\ we\ see\ the\ reaction.\n\ For\ this\ reason,\ all\ statements\ that\ actually\ change\ things\ are\ held\ in\ the\ react\ method.\n
comment2.params=
comment2.target=double\ getAggression()
comment20.params=guy\ otherGuy
comment20.target=void\ react(Mover,\ Mover)
comment20.text=\n\ The\ reaction\ method.\n\ \n\ This\ method\ sees\ which\ of\ the\ six\ available\ options\ the\ interaction\ class\ chose.\n\ Then\ based\ on\ their\ own\ attributes,\ it\ picks\ how\ the\ character\ might\ respond.\n\ \n\ This\ also\ uses\ the\ probabilities\ generated\ in\ compare(Mover,Mover)\n\ \n\ another\ reiteration\ of\ what\ positive\ does\:\n\ If\ positive\ is\ true,\ the\ other\ guy\ will\ get\ +1\ love\n\ If\ positive\ is\ false,\ the\ other\ guy\ will\ get\ -1\ love\n\ \n\ Some\ of\ the\ reactions\ involve\ lowering\ the\ other\ player's\ health.\n\ When\ the\ player's\ health\ hits\ 0,\ they'll\ die,\ but\ I\ still\ don't\ want\ to\ put\ that\ in\ until\ I\ have\ a\ method\ of\ repopulation.\n\ I'd\ rather\ not\ make\ a\ last-man-standing\ type\ situation.\n\ \n
comment21.params=aString
comment21.target=void\ setLastInteract(java.lang.String)
comment22.params=
comment22.target=java.lang.String\ getStory()
comment23.params=opt\ aName
comment23.target=java.lang.String\ listResponses(int,\ java.lang.String)
comment3.params=x
comment3.target=void\ setCompatibility(int)
comment4.params=x
comment4.target=void\ setCunning(int)
comment5.params=x
comment5.target=void\ setViolence(int)
comment6.params=
comment6.target=java.lang.String\ getName()
comment7.params=
comment7.target=java.lang.String\ getOtherName()
comment8.params=x
comment8.target=void\ setLove(double)
comment9.params=
comment9.target=double\ getLove()
numComments=24
