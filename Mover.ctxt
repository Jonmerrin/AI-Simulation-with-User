#BlueJ class context
comment0.params=
comment0.target=Mover()
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ Mover\n
comment1.params=newName
comment1.target=Mover(java.lang.String)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Alien\n
comment10.params=
comment10.target=void\ turn()
comment10.text=\n\ This\ method\ moves\ the\ characters\ forward\ a\ "turn"\n\ This\ is\ where\ I\ tried\ to\ put\ in\ a\ simulated\ economy\ of\ sorts.\n\ \n\ Every\ "turn"\ the\ character\ will\ gain\ 30%\ of\ what\ he\ already\ had,\n\ but\ will\ lose\ the\ amount\ of\ moneys\ that\ it\ costs\ to\ subsist.\n\ 200\ is\ a\ fairly\ arbitrary\ number,\ picked\ because\ it\ gives\ enough\ leeway\ for\ the\ wealthy\ to\ get\ wealthier,\ and\ the\ poor\ to\ get\ poorer\n\ (a\ sad,\ but\ not\ totally\ inaccurate\ observation\ of\ the\ world)\n\ \n\ And\ when\ hunger\ \=\ 3,\ the\ character\ will\ die.\ I\ haven't\ put\ that\ in\ place\ yet\ because\:\n\ a)\ I\ don't\ have\ a\ system\ of\ repopulation\ yet\ (will\ come\ when\ I\ add\ females)\n\ b)\ I\ don't\ yet\ have\ a\ system\ for\ weighing\ decisions\ based\ on\ desparation.\ I'll\ have\ people\ be\ more\ likely\ to\ help\ if\ the\ person\ is\ starving\ than\ if\ they\ just\ ate.\n\ right\ now\ I\ feel\ that\ the\ odds\ are\ already\ stacked\ against\ the\ poor\ of\ my\ world,\ best\ not\ make\ those\ odds\ have\ consequences\ until\ they're\ balanced.\n\ \n\ I\ have\ a\ system\ in\ the\ Interactions\ class\ for\ theft\ and\ charity\ to\ mix\ it\ up\ a\ little.\n\ \n
comment11.params=
comment11.target=boolean\ getMode()
comment11.text=\n\ tells\ what\ the\ mode\ is\ through\ the\ World\n
comment12.params=intro
comment12.target=void\ setKnown(boolean)
comment13.params=
comment13.target=boolean\ getKnown()
comment14.params=
comment14.target=void\ move()
comment14.text=\n\ \n\ This\ method\ either\ moves\ the\ characters\ to\ an\ adjacent\ place\ on\ the\ grid,\ or\ keeps\ them\ in\ the\ same\ place.\n\ \n\ Selects\ direction\ (dir)\ randomly,\ but\ rerolls\ the\ selection\ if\ the\ room\ is\ overcrowded\ or\ non-existent.\n\ \n\ \n\ I\ recognize\ that\ Math.random()\ isn't\ perfectly\ random,\ but\ it's\ all\ I\ know\ at\ the\ moment,\ and\ so\ all\ I\ use.\n
comment15.params=
comment15.target=boolean\ rollFor()
comment16.params=g
comment16.target=void\ setNotice(boolean)
comment17.params=
comment17.target=boolean\ getNotice()
comment18.params=x
comment18.target=void\ setStr(double)
comment19.params=x
comment19.target=void\ setInt(double)
comment2.params=newName\ newWorld
comment2.target=Mover(java.lang.String,\ World)
comment2.text=\n\ The\ constructor\ names\ a\ character,\ places\ it\ in\ a\ world,\ and\ assigns\ all\ the\ random\ attributes.\n
comment20.params=x
comment20.target=void\ setHP(double)
comment21.params=x
comment21.target=void\ setSOH(double)
comment21.text=\n\ Not\ used\ for\ now\n
comment22.params=x
comment22.target=void\ setSilly(double)
comment22.text=\n\ Not\ used\ for\ now\n
comment23.params=x
comment23.target=void\ setStub(double)
comment23.text=\n\ Not\ used\ for\ now\n
comment24.params=x
comment24.target=void\ setArt(double)
comment24.text=\n\ Not\ used\ for\ now\n
comment25.params=x
comment25.target=void\ setSpeed(double)
comment25.text=\n\ Not\ used\ for\ now\n
comment26.params=x
comment26.target=void\ setWealth(double)
comment27.params=x
comment27.target=void\ setMorality(double)
comment28.params=a\ b\ c\ d\ e\ f\ g\ h\ i\ j
comment28.target=void\ setStats(int,\ int,\ double,\ double,\ double,\ double,\ double,\ double,\ double,\ int)
comment29.params=meeting
comment29.target=void\ addImpression(Interactions)
comment29.text=\n\ This\ adds\ a\ new\ interaction\ to\ the\ list\ Impressions.\n\ Interactions\ are\ stored\ there,\ and\ by\ extension\ so\ are\ one\ character's\ feelings\ for\ another.\n\ \n\ This\ allows\ for\ characters\ to\ "remember"\ one\ another,\ and\ build\ a\ relationship\ over\ time.\n\ They\ can\ become\ friends\ or\ enemies\ right\ now,\ and\ change\ how\ aggressive\ they\ are\ towards\ one\ another,\n\ but\ I\ plan\ on\ adding\ a\ lot\ to\ how\ a\ relationship\ impacts\ both\ the\ characters'\ moods\ and\ their\ actions\ towards\ each\ other\ with\ growing\ familiarity.\n
comment3.params=newName
comment3.target=void\ setName(java.lang.String)
comment30.params=
comment30.target=java.lang.String\ getName()
comment31.params=
comment31.target=double\ getAggression()
comment32.params=
comment32.target=double\ getCompatibility()
comment33.params=
comment33.target=double\ getViolence()
comment34.params=
comment34.target=double\ getCunning()
comment35.params=aWorld
comment35.target=void\ setWorld(World)
comment36.params=
comment36.target=World\ getWorld()
comment37.params=
comment37.target=int\ getStatsNum()
comment38.params=
comment38.target=double\ getStrength()
comment39.params=
comment39.target=double\ getIntellect()
comment4.params=name
comment4.target=void\ setRanName(NamesBoys)
comment40.params=
comment40.target=double\ getMorality()
comment41.params=
comment41.target=double\ getHealth()
comment42.params=
comment42.target=double\ getHealthPercent()
comment43.params=
comment43.target=double\ getWealth()
comment44.params=x
comment44.target=double\ getStat(int)
comment45.params=
comment45.target=java.util.LinkedList\ getImpressions()
comment46.params=
comment46.target=Inventory\ getInventory()
comment47.params=
comment47.target=java.awt.Point\ getCurrentLocation()
comment48.params=guy
comment48.target=void\ interact(Mover)
comment48.text=\n\ This\ is\ the\ first\ interaction\ method\ involved\ in\ an\ interaction.\n\ The\ real\ one\ is\ contained\ within\ the\ class\ Interactions,\ but\ this\ sets\ up\ what\ goes\ through\ that\ class\ and\ where\ the\ class\ gets\ stored.\n\ \n\ The\ method\ checks\ to\ see\ if\ the\ character\ has\ met\ the\ other\ character\ before.\n\ If\ they\ have,\ they\ interact\ based\ on\ their\ last\ impression\ of\ them,\ then\ the\ impression\ updates.\n\ If\ they\ have\ not,\ they\ create\ a\ new\ impression\ that\ they\ save\ for\ next\ time,\ and\ interact\ based\ on\ that.\n\ \n\ There\ is\ also\ a\ reaction\ in\ here.\ \n\ The\ reaction\ is\ the\ response\ to\ one\ of\ the\ 6\ (a\ disappointingly\ small\ number\ compared\ to\ what\ I\ originally,\ and\ still\ have,\ planned)\ options\ of\ what\ one\ character\ can\ do\ to\ another.\n\ The\ reaction\ dictates\ how\ one\ character\ responds\ (multiple\ possible\ reactions\ per\ action)\ and\ how\ the\ two\ characters\ feel\ differently\ about\ each\ other\ in\ the\ end.\n\ \n
comment49.params=guy
comment49.target=void\ interact(User)
comment5.params=x\ y
comment5.target=void\ setLocation(int,\ int)
comment50.params=
comment50.target=java.lang.String\ toString()
comment50.text=\n\ The\ toString\ will\ basically\ be\ like\ a\ baseball\ card\ showing\ off\ the\ character.\n\ All\ it's\ missing\ is\ a\ picture.\n
comment6.params=
comment6.target=int\ getXLocation()
comment7.params=
comment7.target=int\ getYLocation()
comment8.params=
comment8.target=java.lang.String\ getTag()
comment9.params=nameOfChar
comment9.target=Interactions\ getImpression(java.lang.String)
numComments=51
