#BlueJ class context
comment0.params=
comment0.target=World()
comment1.params=newName
comment1.target=World(java.lang.String)
comment10.params=
comment10.target=int\ getHowManyRooms()
comment11.params=
comment11.target=java.util.LinkedList\ getPeople()
comment12.params=x\ y
comment12.target=Room\ getRoom(int,\ int)
comment12.text=\n\ This\ method\ picks\ out\ and\ returns\ a\ single\ room\ on\ a\ grid.\n\ \n\ More\ experimentation\ with\ Illegal\ Argument\ Exceptions.\n\ I\ think\ this\ is\ the\ only\ class\ I\ use\ it\ in.\n
comment13.params=
comment13.target=void\ createMover()
comment13.text=\n\ creates\ a\ new\ mover\ with\ random\ name\ and\ attributes.\n\ \n
comment14.params=guy
comment14.target=void\ addMover(Mover)
comment15.params=guy
comment15.target=void\ removeMover(Mover)
comment16.params=
comment16.target=Room\ getRandomRoom()
comment16.text=\n\ This\ method\ picks\ out\ and\ returns\ one\ random\ room\ on\ the\ grid\n\ This\ is\ one\ of\ the\ ideas\ I\ played\ with\ for\ putting\ a\ character\ in\ a\ random\ room.\n\ I\ ended\ up\ just\ randomly\ generating\ x\ and\ y\ coordinates,\ but\ I\ still\ think\ this\ will\ be\ useful\ for\ placing\ other\ things\ (probably\ items)\ randomly.\n
comment17.params=x\ y
comment17.target=void\ setLocation(int,\ int)
comment17.text=\n\ Sets\ location\ for\ player\ in\ world.\n\ Perhaps\ to\ be\ used\ on\ non-player\ characters\ later,\ or\ the\ x\ and\ y\ might\ be\ held\ by\ characters\ later.\n\ \n\ Currently\ not\ used,\ though\ I\ toyed\ with\ the\ idea\ of\ allowing\ the\ player\ to\ drag\ and\ drop\ the\ AIs.\n
comment18.params=
comment18.target=void\ moveAll()
comment18.text=\n\ Makes\ all\ of\ the\ movers\ in\ the\ world\ move\ to\ an\ adjacent\ space\ on\ the\ grid,\ or\ else\ stay\ where\ they\ are.\n\ By\ doing\ this,\ it\ also\ indirectly\ causes\ interactions.\ (see\:\ Room.addMover())\n
comment19.params=
comment19.target=java.lang.String\ toString()
comment19.text=\n\ \n\ Converts\ the\ world\ into\ a\ readable\ form.\n\ This\ is\ what\ ends\ up\ being\ the\ map.\n\ \n
comment2.params=newWorldWidth\ newWorldHeight\ newName
comment2.target=World(int,\ int,\ java.lang.String)
comment2.text=\n\ Constructor\ for\ objects\ of\ class\ World\n
comment3.params=x\ y\ newRoom
comment3.target=void\ setRoom(int,\ int,\ Room)
comment3.text=\n\ This\ is\ just\ a\ function\ to\ set\ a\ null\ room\ to\ be\ equal\ to\ a\ non\ null\ room.\n\ I\ used\ the\ opportunity\ to\ try\ using\ Illegal\ Argument\ Exceptions\ to\ catch\ bugs,\ \n\ which\ did\ turn\ out\ to\ be\ really\ helpful\ in\ the\ long\ run\ when\ I\ had\ a\ glitch\ setting\ up\ the\ worlds,\ \n\ but\ I\ didn't\ feel\ comfortable\ enough\ making\ them\ to\ use\ them\ more\ frequently.\n
comment4.params=tf2
comment4.target=void\ setMode(boolean)
comment5.params=
comment5.target=boolean\ getMode()
comment6.params=newName
comment6.target=void\ setName(java.lang.String)
comment6.text=\n\ I\ thought\ worlds\ should\ have\ an\ identifying\ feature,\ like\ a\ name.\ \n\ In\ my\ main\ game,\ I\ have\ the\ player\ move\ through\ multiple\ worlds,\ so\ this\ is\ helpful.\n
comment7.params=
comment7.target=int\ getWidth()
comment8.params=
comment8.target=int\ getHeight()
comment9.params=
comment9.target=java.lang.String\ getName()
numComments=20
